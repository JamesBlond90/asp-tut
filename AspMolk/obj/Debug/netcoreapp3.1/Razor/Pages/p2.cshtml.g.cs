#pragma checksum "/Users/alexandergerhardsson/Projects/AspMolk/AspMolk/Pages/p2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c7130b308f43db0f19e7231827fdb61f5be27a3a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspMolk.Pages.Pages_p2), @"mvc.1.0.razor-page", @"/Pages/p2.cshtml")]
namespace AspMolk.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/alexandergerhardsson/Projects/AspMolk/AspMolk/Pages/_ViewImports.cshtml"
using AspMolk;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c7130b308f43db0f19e7231827fdb61f5be27a3a", @"/Pages/p2.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3b2d52e94636fae3d6962bf70cceb3c489ced01e", @"/Pages/_ViewImports.cshtml")]
    public class Pages_p2 : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "/Users/alexandergerhardsson/Projects/AspMolk/AspMolk/Pages/p2.cshtml"
  
    ViewData["Title"] = "kalkylator";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n    <html>\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c7130b308f43db0f19e7231827fdb61f5be27a3a3128", async() => {
                WriteLiteral(@"
        <meta charset=""utf-8"" />
        <title>MyCalc</title>
        <style type=""text/css"">
            body {
                font-size: 150%;
            }

            td.but {
                text-align: center;
                padding: 0 0.2em 0 0.2em;
                background: #AAA;
                border-style: solid;
                border-color: #CCC #888 #888 #CCC;
            }

                td.but:hover {
                    border-style: solid;
                    border-color: #DDB #997 #997 #DDB;
                    background: #BB9;
                }

                td.but:active {
                    border-style: solid;
                    border-color: #888 #CCC #CCC #888;
                    background: #BBB;
                }

            td.but-br {
                text-align: center;
                padding: 0 0.2em 0 0.2em;
                background: #CCC;
                border-style: solid;
                border-color: #EEE #AAA #AAA #EEE;
            }

                t");
                WriteLiteral(@"d.but-br:hover {
                    border-style: solid;
                    border-color: #EEB #AA7 #AA7 #EEB;
                    background: #CC9;
                }

                td.but-br:active {
                    border-style: solid;
                    border-color: #AAA #EEE #EEE #AAA;
                    background: #BBB;
                }

            td.display {
                text-align: left;
                border-style: solid;
                border-color: #888 #CCC #CCC #888;
                background: white;
            }

            td.entry {
                text-align: left;
                border-style: none;
                background: white;
            }

            table.calc {
                border-collapse: separate;
                border-spacing: 0.1em !important;
            }
        </style>
        <script>/* text entry stuff */
            var entry = """";
            var sgn = """";
            function showEntry() {
                var e = document.getElementById('");
                WriteLiteral(@"entry');
                e.innerHTML = sgn + entry + ""_"";
            }

            /* stack stuff */
            var s = { X: 0, Y: 0, Z: 0, T: 0 };
            function showStack() {
                var S = document.getElementById('stack');
                S.innerHTML = """";
                for (v in s) {
                    S.innerHTML = v + "": "" + s[v] + ""<br/>"" + S.innerHTML;
                }
                // S.innerHTML = ""t: ""+s.T+""<br/>z: ""+s.Z+""<br/>y: ""+s.Y+""<br/>x: ""+s.X;
            }

            function push(newX) {
                s.T = s.Z; s.Z = s.Y; s.Y = s.X; s.X = newX;
                showStack();
            }
            function concat(n) {
                entry = entry + n;
                showEntry();
            }
            function cle() {
                entry = """";
                showEntry();
            }
            function cls() {
                s.X = s.Y = s.Z = s.T = 0;
                showStack();
            }
            function enter() {
                push(1 ");
                WriteLiteral(@"* (sgn + entry));
                entry = """";
                sgn = """";
                showEntry();
            }
            function chs() {
                if (sgn == """") {
                    sgn = ""-"";
                }
                else if (sgn == ""-"") {
                    sgn = ""+"";
                }
                else if (sgn == ""+"") {
                    sgn = ""-"";
                }
                showEntry();
            }
            function divOp() {
                s.X = s.Y / s.X; s.Y = s.Z; s.Z = T;
                showStack();
            }
            function mulOp() {
                s.X = s.Y * s.X; s.Y = s.Z; s.Z = s.T;
                showStack();
            }
            function subOp() {
                s.X = s.Y - s.X; s.Y = s.Z; s.Z = s.T;
                showStack();
            }
            function addOp() {
                s.X = s.Y + s.X; s.Y = s.Z; s.Z = s.T;
                showStack();
            }
            function kp() {
                var val = event.key;
");
                WriteLiteral(@"                var debug = document.getElementById('debug');
                debug.innerHTML = val;

                if ('0' <= val && val <= '9') {
                    concat(val);
                }
                else if (val == '.') {
                    concat('.');
                }
                else if (val == 'Escape') {
                    cle();
                }
                else if (val == 'Backspace') {
                    cls();
                }
                else if (val == 'Enter') {
                    enter();
                }
                else if (val == '/') {
                    divOp();
                }
                else if (val == '*') {
                    mulOp();
                }
                else if (val == '-') {
                    subOp();
                }
                else if (val == '+') {
                    addOp();
                }
            }
            window.addEventListener('keydown', kp);</script>
    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c7130b308f43db0f19e7231827fdb61f5be27a3a9342", async() => {
                WriteLiteral(@"
        <h1>Calc</h1>
        <table class=""calc"">
            <tr>
                <td colspan=""4"" id=""stack"" class=""display"">
                </td>
                <script>showStack();</script>
            </tr>
            <tr>
                <td id=""entry"" colspan=""4"" class=""entry"">
                    _
                </td>
            </tr>
            <tr>
                <td class=""but"" onclick=""enter()"" colspan=""2"">enter</td>
                <td class=""but"" onclick=""cle()"">ce</td>
                <td class=""but"" onclick=""cls()"">cs</td>
            </tr>
            <tr>
                <td width=""40"" class=""but-br"" onclick=""concat('7')"">7</td>
                <td width=""40"" class=""but-br"" onclick=""concat('8')"">8</td>
                <td width=""40"" class=""but-br"" onclick=""concat('9')"">9</td>
                <td width=""40"" class=""but"" onclick=""divOp()"">/</td>
            </tr>
            <tr>
                <td class=""but-br"" onclick=""concat('4')"">4</td>
                <td class=""but-br"" onclick=");
                WriteLiteral(@"""concat('5')"">5</td>
                <td class=""but-br"" onclick=""concat('6')"">6</td>
                <td class=""but"" onclick=""mulOp()"">*</td>
            </tr>
            <tr>
                <td class=""but-br"" onclick=""concat('1')"">1</td>
                <td class=""but-br"" onclick=""concat('2')"">2</td>
                <td class=""but-br"" onclick=""concat('3')"">3</td>
                <td class=""but"" onclick=""subOp()"">-</td>
            </tr>
            <tr>
                <td class=""but"" onclick=""chs()"">±</td>
                <td class=""but-br"" onclick=""concat('0')"">0</td>
                <td class=""but"" onclick=""concat('.')"">.</td>
                <td class=""but"" onclick=""addOp()"">+</td>
            </tr>
        </table>
        <p id=""debug"">ingen fara</p>
    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    </html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<AspMolk.Pages.p2Model> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AspMolk.Pages.p2Model> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AspMolk.Pages.p2Model>)PageContext?.ViewData;
        public AspMolk.Pages.p2Model Model => ViewData.Model;
    }
}
#pragma warning restore 1591
